{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
int technosoft_idm(bool,int)		// parametri del costruttore: (bool host, int ID_axis)
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
	int setHost(bool);			// TRUE se Host
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
	int initComunication();			// puo\'92 instaurarla solo l\'92host
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\fi960\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
int moveRelativeSteps(int, int, int);	// (0 -> OK) \'a0(\uc0\u8800 0 -> error)
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int setVelocity(int);
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int setAcceleration(int);
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int setProfile(int);			// Moto Trapezoidale o SCurve
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int stop();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int resetCounter();			// TPOS_register();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int resetEncoder();			// APOS_register();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int read_register();			// REG_MER_register();
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\fi960\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
// int readEndRun_in();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
// int readEndRun_out();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
// int readEmergency();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
// int readI2t();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
// int read overCurrent();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
 
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
private:
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
	bool host;		// TRUE per l\'92Host; solo l\'92Host puo\'92 inizializzare la comunicazione seriale
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\fi960\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
int ID_axis;		// numero dell\'92asse (selezionabile da dip switch su modulo Technosoft
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int axis_ref;		// handler
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
char setup_file[100];
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int absoluteSteps;	// contatore software
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int Velocity;
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int Acceleration;
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int status_register;	// Reg_MER
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int error_register; 
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
\}
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\
\
\pard\pardeftab720\sl400

\f0\i\fs30 \cf0 \expnd0\expndtw0\kerning0
\ul \ulc0 .cpp
\f1\i0\fs24 \expnd0\expndtw0\kerning0
\ulnone \
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
void IDM::moveRelative(int Steps, int Velocity, int Acceleration) \{
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
...
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
\}
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
void IDM::stop()
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa120
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
Classe Attuatore
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\i\fs30 \cf0 \expnd0\expndtw0\kerning0
\ul .h
\f1\i0\fs24 \expnd0\expndtw0\kerning0
\ulnone \
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
class Attuator \{
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
public:
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\fi960\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
int moveRelativeMillimeters(float);
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int stopMotion();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int homing();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int getStatus();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int setStatus(); 
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
private:
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
	char attuator_name[20];	// es. SLTTB001_left
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\fi960\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
float range();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
float mechanicalReduceFactor();
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
int type();		// tech
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
\}
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa120
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
Classe Collimatore
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720\sl400

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
.h
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
class Scrapers\{		// usa n attuatori (nel caso slitte=2)
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
public:
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
	int setAperture(float);
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
	int setCentrature(float);
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
private:
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
	char scrapers_name[8];	// es. SLT TB 001
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
}